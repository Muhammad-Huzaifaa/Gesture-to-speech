#Raspberry Pi 3b+ Code:

# Import libraries
import Adafruit_MCP3008
import time
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BCM)
import smbus
import math
import numpy as np
from csv import writer
import pandas as pd
import glob
import os
import matplotlib.pyplot as plt
from sklearn import datasets 
from sklearn.metrics import confusion_matrix 
from sklearn.model_selection import train_test_split 
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from gtts import gTTS
#-------------------------------------------
# Some MPU6050 Registers and their Address
#-------------------------------------------
PWR_MGMT_1   = 0x6B
SMPLRT_DIV   = 0x19
CONFIG       = 0x1A
GYRO_CONFIG  = 0x1B
INT_ENABLE   = 0x38
ACCEL_XOUT_H = 0x3B
ACCEL_YOUT_H = 0x3D
ACCEL_ZOUT_H = 0x3F
GYRO_XOUT_H  = 0x43
GYRO_YOUT_H  = 0x45
GYRO_ZOUT_H  = 0x47
#-------------------------------------------
# Post-Processed MPU6050 Global Variables
#-------------------------------------------
Ax=0
Ay=0
Az=0
Gx=0
Gy=0
Gz=0
G_x=0
G_y=0
G_z=0
A_x=0
A_y=0
A_z=0
a = 0
factor = 1.0
Mul_acc = 16384.0/factor
Mul_gyro= 131.0/factor

SAMPLING_RATE = 60
SAMPLING_TIME = 1/SAMPLING_RATE
CLK  = 18
MISO = 23
MOSI = 24
CS   = 25
mcp = Adafruit_MCP3008.MCP3008(clk=CLK, cs=CS, miso=MISO, mosi=MOSI)
def MPU_values():
    global Ax
    global Ay
    global Az
    global Gx
    global Gy
    global Gz
    global A_x
    global A_y
    global A_z
    global Mul_acc
    global Mul_gyro
    #Read Accelerometer raw value
    acc_x = read_raw_data(ACCEL_XOUT_H)
    acc_y = read_raw_data(ACCEL_YOUT_H)
    acc_z = read_raw_data(ACCEL_ZOUT_H)
    #Read Gyroscope raw value
    gyro_x = read_raw_data(GYRO_XOUT_H)
    gyro_y = read_raw_data(GYRO_YOUT_H)
    gyro_z = read_raw_data(GYRO_ZOUT_H)
    Ax = acc_x/Mul_acc
    #Ax = acc_x
    Ay = acc_y/Mul_acc
    #Ay = acc_y
    Az = acc_z/Mul_acc
    #Az = acc_z
    Gx = gyro_x/Mul_gyro
    Gy = gyro_y/Mul_gyro
    Gz = gyro_z/Mul_gyro
    x2 = Ax*Ax
    y2 = Ay*Ay
    z2 = Az*Az
    sqr_x = math.sqrt(y2+z2)
    sqr_y = math.sqrt(x2+z2)
    sqr_z = math.sqrt(y2+x2)
    A_x = 57.298*math.atan2(Ax,sqr_x)
    A_y = 57.298*math.atan2(Ay,sqr_y)
    A_z = 57.298*math.atan2(Az,sqr_z)
def MPU_Init():
    #write to sample rate register
    bus.write_byte_data(Device_Address, SMPLRT_DIV, 0)

    #Write to power management register
    bus.write_byte_data(Device_Address, PWR_MGMT_1, 1)
    
    #Write to Configuration register
    bus.write_byte_data(Device_Address, CONFIG, 1)
    
    #Write to Gyro configuration register
    bus.write_byte_data(Device_Address, GYRO_CONFIG, 0)
    
    #Write to interrupt enable register
    bus.write_byte_data(Device_Address, INT_ENABLE, 1)

def read_raw_data(addr):
    #Accelero and Gyro value are 16-bit
        high = bus.read_byte_data(Device_Address, addr)
        low = bus.read_byte_data(Device_Address, addr+1)
        #concatenate higher and lower value
        value = ((high << 8) | low)
        
        #to get signed value from mpu6050
        if(value > 32768):
                value = value - 65536
        return value
bus = smbus.SMBus(1)    # or bus = smbus.SMBus(0) for older version boards
Device_Address = 0x68   # MPU6050 device address
#plt.ion()
MPU_Init()

#---------Machine Learning Implementation--------------#

train_file = glob.glob("trainingdata.csv") #current path
df_train_list = [] #initializing list
for fname in train_file:  #reading data form csv file/files and storing in variable
  df_train_list.append(pd.read_csv(fname,header=None,index_col=False)) #data of variable is appending in list
training_flat_list = pd.concat(df_train_list) #concatinating list into dataframe
training_flat_list = pd.DataFrame(training_flat_list) #concatinating data of the list in pandas dataframe

train = training_flat_list

X_train = train.iloc[:,:-1] #selecting all rows and all columns except last column
y_train = train.iloc[:,-1] #selecting all rows with only last column

#Fit model to DtreeClassifier 
dtree = DecisionTreeClassifier(random_state=0)
dtree.fit(X_train,y_train)
#-----------------------------------------------------#
timeout = 5
timeout_start = time.time()
while True:
    i = 0
    list_values = []
    testing_flat_list = []
    df_test_list=[]
    while i<=9: #run the loop 10 times to gather values from sensors
            # Read the ADC channel, normalize and round it to required decimal places
            value0 = round((mcp.read_adc(0)),3)
            value1 = round((mcp.read_adc(1)),3)
            value2 = round((mcp.read_adc(2)),3)
            value3 = round((mcp.read_adc(3)),3)
            print("{0} {1} {2}".format(value1,value2,value3))
            MPU_values()
            print("Ax = ",round(A_x,0), "| Ay = ", round(A_y,0), "| Az = ", round(A_z,0))
            Axx = round(A_x,0)
            Ayy = round(A_y,0)
            Azz = round(A_z,0)
            #adding recorded values to the list
            list_values.append(Axx)
            list_values.append(Ayy)
            list_values.append(Azz)
            list_values.append(value1)
            list_values.append(value3)
            i = i+1
            time.sleep(0.30)
    print(i)

    testing_array=np.array(list_values) 
    for oneD in testing_array:
        df_test_list.append(np.array(oneD).flatten())
    df_test_list=pd.DataFrame(list_values)
    df_test_list=df_test_list.transpose() #makes rows of data
    #Sorting data
    test = df_test_list
    X_test = test.iloc[:,:]
    y_test = test.iloc[:,-1]
    #Predict values by DtreeClassifier
    dtree_predict = dtree.predict(X_test)
    print(dtree_predict)
    filename=np.array_str(dtree_predict)
    strfilename=''.join(dtree_predict) #using the value predicted as string for filename to be played
    os.system("mpg321 {}.mp3 &".format(strfilename)) #playing data from audio file
    time.sleep(2) #wait for 2 seconds for loop to run again
